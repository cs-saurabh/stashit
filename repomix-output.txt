This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-24T12:18:18.130Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/
  commands/
    list-stash.tsx
    stash-utils.ts
    stash.tsx
.eslintrc.json
.gitignore
.prettierrc
CHANGELOG.md
package.json
README.md
tsconfig.json

================================================================
Repository Files
================================================================

================
File: src/commands/list-stash.tsx
================
import { Action, ActionPanel, List, Clipboard, Icon } from "@raycast/api";
import { getStashedItems } from "./stash-utils";

export default function ListStash() {
  const items = getStashedItems();

  return (
    <List>
      {items.map((item) => (
        <List.Item
          key={item.path}
          title={item.name}
          actions={
            <ActionPanel>
              <Action title="Copy to Clipboard" icon={Icon.Clipboard} onAction={() => Clipboard.copy(item.path)} />
              <Action.OpenWith path={item.path} />
              <Action.ShowInFinder path={item.path} />
            </ActionPanel>
          }
        />
      ))}
    </List>
  );
}

================
File: src/commands/stash-utils.ts
================
import fs from "fs";
import path from "path";
import { execSync } from "child_process";

const STASH_DIR = path.join(process.env.HOME || "", ".stashit");

export function ensureStashDir() {
  if (!fs.existsSync(STASH_DIR)) {
    fs.mkdirSync(STASH_DIR, { recursive: true });
  }
}

export function copyToStash(filePaths: string[]) {
  ensureStashDir();
  filePaths.forEach((filePath) => {
    const dest = path.join(STASH_DIR, path.basename(filePath));
    execSync(`cp -R "${filePath}" "${dest}"`);
  });
}

export function getStashedItems() {
  ensureStashDir();
  return fs.readdirSync(STASH_DIR).map((file) => ({
    name: file,
    path: path.join(STASH_DIR, file),
  }));
}

================
File: src/commands/stash.tsx
================
import { Keyboard, LaunchProps } from "@raycast/api";
import { copyToStash } from "./stash-utils";
import { execSync } from "child_process";

export default function StashCommand(props: LaunchProps) {
  const appleScript = `
  tell application "Finder"
    set theSelection to selection
    set pathsList to {}
    repeat with itemRef in theSelection
      set end of pathsList to POSIX path of (itemRef as alias)
    end repeat
    return pathsList
  end tell
  `;

  const runAppleScript = async (script: string) => {
    const result = execSync(`osascript -e '${script}'`).toString();
    return result.split("\n").filter((item) => item.trim() !== "");
  };

  const handleStash = async () => {
    const filePaths = await runAppleScript(appleScript);
    if (filePaths.length === 0) {
      return <div>No files selected in Finder!</div>;
    }
    copyToStash(filePaths);
    return <div>Stashed {filePaths.length} items!</div>;
  };

  return handleStash();
}

================
File: .eslintrc.json
================
{
  "root": true,
  "extends": ["@raycast"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules

# Raycast specific files
raycast-env.d.ts
.raycast-swift-build
.swiftpm
compiled_raycast_swift

# misc
.DS_Store

================
File: .prettierrc
================
{
  "printWidth": 120,
  "singleQuote": false
}

================
File: CHANGELOG.md
================
# StashIt Changelog

## [Initial Version] - {PR_MERGE_DATE}

================
File: package.json
================
{
  "$schema": "https://www.raycast.com/schemas/extension.json",
  "name": "stashit",
  "title": "StashIt",
  "description": "",
  "icon": "extension-icon.png",
  "author": "saurabh_pawar",
  "categories": [
    "Productivity"
  ],
  "license": "MIT",
  "commands": [
    {
      "name": "stash",
      "title": "Stash Selection",
      "description": "Stash selected Finder items",
      "mode": "view",
      "shortcut": "cmd-k"
    },
    {
      "name": "list-stash",
      "title": "Show Stash",
      "description": "Show stashed items",
      "mode": "view"
    }
  ],
  "dependencies": {
    "@raycast/api": "^1.89.1",
    "@raycast/utils": "^1.17.0"
  },
  "devDependencies": {
    "@raycast/eslint-config": "^1.0.11",
    "@types/node": "20.8.10",
    "@types/react": "18.3.3",
    "eslint": "^8.57.0",
    "prettier": "^3.3.3",
    "typescript": "^5.4.5"
  },
  "scripts": {
    "build": "ray build",
    "dev": "ray develop",
    "fix-lint": "ray lint --fix",
    "lint": "ray lint",
    "prepublishOnly": "echo \"\\n\\nIt seems like you are trying to publish the Raycast extension to npm.\\n\\nIf you did intend to publish it to npm, remove the \\`prepublishOnly\\` script and rerun \\`npm publish\\` again.\\nIf you wanted to publish it to the Raycast Store instead, use \\`npm run publish\\` instead.\\n\\n\" && exit 1",
    "publish": "npx @raycast/api@latest publish"
  }
}

================
File: README.md
================
# StashIt

================
File: tsconfig.json
================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "include": ["src/**/*", "raycast-env.d.ts"],
  "compilerOptions": {
    "lib": ["ES2023"],
    "module": "commonjs",
    "target": "ES2022",
    "strict": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "jsx": "react-jsx",
    "resolveJsonModule": true
  }
}
